#!/usr/bin/expect -f

set working_dir [lindex $argv 0]

source $working_dir/salt.expect

set proxy_host [lindex $argv 1]
set timearg [lindex $argv 2]
set portarg [lindex $argv 3]
set sshport [lindex $argv 4]

set salt [getsalt "salt: "]
set proxy_pass [getpass $working_dir $proxy_host $salt]

set timeout [expr $timearg*60]

set count_loop 0

proc init_connect { loop_number } {

	global pid
	set pid [uplevel #0 spawn ssh -R $::portarg:localhost:$::sshport $::proxy_host]
	set message "You are now logged in for $::timearg mins on port $::portarg \[$loop_number\]"
	
	send_user "connecting...\n"

	#login handles cases:
	#   login with keys (no user/pass)
	#   user/pass
	#   login with keys (first time verification)
	expect {
		"% " { send "$message"}
		"assword: " { 
			send "$::proxy_pass\n" 
			expect {
				"% " { 
					send_user "$message"
					expect {
						timeout {ontimeout " -> catch"}
					}
				}
			}
		}
		"(yes/no)? " { 
			send "yes\n"
			expect {
				"assword: " { 
					send "$::proxy_pass\n" 
					expect {
						"% " { 
							send_user "$message"
							expect {
								timeout {ontimeout "catch"}
							}
						}
					}
				}
			}
		}
		send_user "Login failed\n"
	}
}

proc ontimeout { messages } {
	global count_loop
	
	exec kill -9 $::pid
	sleep 2;
	send_user "$messages\n"
	set count_loop [expr {$::count_loop + 1}]
	init_connect $count_loop
}

init_connect $count_loop
