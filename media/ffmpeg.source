#!/bin/bash

ffbin=ffmpeg
pybin=python2

# constants
donekey="_OUT"  # This means that this vid has already been 
                # processed and can be skipped from further selection

max_width=500   # max allowed width for playing nominally on N900
container=mkv    # Holds virtually any stream 
encoder=libx264   # Codec compatible with N900


vidsize() {
  ffprobe $1 2>&1 | grep Video: | awk -F ", " '{print $3}' | awk '{print $1}'
}
vidaspect(){
  echo $($pybin -c "w_h=\"`vidsize $1`\".split('x'); print float(w_h[0])/float(w_h[1]);")
}
vidheight() {
  echo $(vidsize $1) | awk -F "x" '{print $2}'
}
vidwidth() {
   echo $(vidsize $1) | awk -F "x" '{print $1}'
}
vidrate() {
   ffprobe $1 2>&1 | grep Video: | awk -F ", " '{print $5}' | awk '{print $1}'
}
videnc() {
   ffprobe $1 2>&1\
 | grep Video:\
 | awk -F ", " '{print $1}'\
 | awk -F "Video: " '{print $NF}' | awk '{print $1}'
}

vidCalcHeight() {
   width=$1;ratio=$2;
   echo $($pybin -c "h=int(float($width)/float($ratio)); h= (h+1) if (h%2!=0) else h; print h;")
} #returns a height divisible by 2 (h264 requirement)

encexists() {
    encoder=$1
    ffprobe -encoders 2>&1 | grep $encoder | tail -1 | wc -w
}

toNokia() {
  if [ $# = 2 ]; then
    file=$1
    outfile=$2/$( echo `basename $file` | awk -F "." -v k=$donekey '{print $(NF-1)k}' )

#    rate=$(vidrate $file)
    
    width=$(vidwidth $file)
    aspect=$(vidaspect $file)
    height=$(vidCalcHeight $max_width $aspect)

    if [ $width -gt $max_width ]; then
        $ffbin -i $file -s $max_width"x"$height -an -q:v 0 -c:v $encoder $rat $outfile"."$container
        
    else
       echo "Skip: $outfile, width=$width, moving to $2"
       mv $1 $2/
    fi
  else
    echo "Give file and output folder!"
  fi
}


toJolla() {
  if [ $# = 2 ]; then
    file=$1
    outfile=$2/$( echo `basename $file` | awk -F "." -v k=$donekey '{print $(NF-1)k}' )

#    rate=$(vidrate $file) 
    max_br="-b:v 350k"
    container=webm
    encoder=vp8

    max_width=850

    width=$(vidwidth $file)
    aspect=$(vidaspect $file)
    height=$(vidCalcHeight $max_width $aspect)

#    if [ $width -gt $max_width ]; then
	rm mylist.txt

	timer=`ffprobe -i $file -show_format -v quiet | sed -n 's/duration=//p' | awk -F  '.' '{print $1}'`
	loops=$(( 30 / $timer ))
	echo "timer=$timer LOOPS=$loops"

	if [ $loops -gt 1 ]; then
		for i in `seq 1 $loops`; do printf "file '%s'\n" $file >> mylist.txt; done
	else
		echo "file '"$file"'" > mylist.txt
	fi

	$ffbin -f concat -i mylist.txt -s $max_width"x"$height\
               -an -q:v 0 -c:v $encoder $max_br $outfile"."$container
#    else
#       echo "Skip: $outfile, width=$width, moving to $2"
#       mv $1 $2/
#    fi
  else
    echo "Give file and output folder!"
  fi
}






convertAll() {
   if [ $# != 1 ]; then
      echo -e "$bldred Give a folder name! $txtrst" >&2
   else
     folder=$1
     mkdir -p $folder
 
     # Pack all images
     zip $RANDOM".zip" *.png *.jpg
     for file in *.zip *.rar; do
         mv $file $folder/ 2>/dev/null
     done

     # Convert all vids
     for file in $(ls | grep -v $donekey | egrep "(.3gp|.flv|.mpg|.mp4|.wmv|.mkv|.avi)");do
         toNokia $file $folder
     done
   fi
}



webm2mp4() {

    [ $# -lt 1 ] && echo "webm2mp4 <video.webm> -->  writes to <video.mp4>" && return -1

    vid=`readlink -f $1`
    out=$( echo `basename $vid` | awk -F"." '{print $1}' )".mp4"

    duration=$(ffprobe -i $vid 2>&1 | grep -oP '(?<=Duration:\s)[0-9:.]+')

    hh=`echo $duration | awk -F":" '{print $1}'`
    mm=`echo $duration | awk -F":" '{print $2}'`
    ss=`echo $duration | awk -F":" '{print $3}'`

    min_secs=10
    total_secs=$( echo "scale=2;($hh * 60 * 60) + ($mm * 60) + $ss" | bc )
    num_times_repeat=$( echo "$min_secs / $total_secs" | bc )
 
    ffmpeg -f concat -i <(for i in `seq 1 $num_times_repeat`; do printf "file '%s'\n" $vid; done) -an -c:v libx264 -crf 19 $out
    echo $out
}
