#!/bin/bash

function randomwait(){
        sleep `echo "scale=1;($RANDOM / 10000) - 1" | bc | sed 's/-//'`
#	sleep 0.1
}

function preamble(){
	# Never used awk: progress
	bins=( hexdump fortune egrep bc sed )
	il=""	# install_list
	
	# Test each
	for b in ${bins[@]}; do
		$b -h >/dev/null 2>&1
		# EX error code
		[ $? = 127 ] && il="$b $il"
	done
	
	# Pure kludge
	[ "$il" != "" ] && echo "Install `echo $(sed 's/ /, /g' <<< $il) | rev | sed 's/,/dna ,/' | rev` first!" >&2 && return -1
	return 0
}


function findrin()
{
	[ $# -lt 1 ] && echo "`basename $0` <hex|lzout>" && return -1

	preamble || return -1

	declare -a progress;
	progress=( 
" ----->"
"-----} "
"----)  "
"--->   "
"--}   -"
"-)   --"
">   ---"
"   ----"
"  -----"
#" ----->"
#"        " "-   " "<-- " " {--" "  (-" "   {"
	)

	prog_len=${#progress[@]}

	# Defaults
	scan_wait_lower=${1:-0}
	scan_wait_upper=${2:-50}

#	echo "$scan_wait_lower $scan_wait_upper"

	# Reticulating Splines.... hmmm
	echo -en "Initialising:\n  *\tconnecting to feeds...      " && randomwait
	echo -en "\t[x]\n  *\tstarting crawler..." && randomwait
	echo -en "\t\t[x]\n  *\tparsing rel. links..." && randomwait
	echo -en "\t\t[x]\n  *\tstream quality..." && randomwait

	# Quality
	fract="$RANDOM/$RANDOM"
	actual_fract=$(echo "scale=2; if ( $fract > 1 ) print \"high\" else print \"low\"" | bc)
	echo -en "($fract)\t[$actual_fract]\n"
	sleep `echo "scale=1;($RANDOM / 10000) - 1" | bc | sed 's/-//'`
	echo -e "\nBegin:"

	if [ "$1" = "hex" ];then
		while :; do

			# Initial pause
			max_loops=$(( 5 + ($RANDOM % 5) ))

			while [ $max_loops -gt 0 ]; do
				waiter=$(( $scan_wait_lower + ( $RANDOM % $(( $scan_wait_upper - $scan_wait_lower)) )  ))
				scanning $waiter
				max_loops=$(( $max_loops - 1 ))
	#			echo $waiter $max_loops
			done

			progressdots `echo "20 + ($RANDOM % 20)" | bc` "$bldred[ connection dropped ] - reconnecting$txtrst""---" 5
			echo -e "\t\t\t\t\t[x]      "
		done

	elif [ "$1" = "lzout" ];then
		tmp=`mktemp`.txt
		journalctl --since yesterday | grep kernel | grep -v "check events logged" | cut -d' ' -f3,5,6- > $tmp

		while read line; do
			waiter=$(( $scan_wait_lower + ( $RANDOM % $(( $scan_wait_upper - $scan_wait_lower)) )  ))
			echo $line
			sleep $waiter
		done<$tmp
	fi

}


# Ah Bash, ye mess.
function progressdots(){
	interval=$1
	pre_message="$2"

	# Spacing defaults
	tbs=${3:-2}
	tabs=""
	while [ $tbs -gt 0 ];do tabs=$tabs"\t"; tbs=$(( $tbs - 1 )); done

	echo -en "$pre_message"

	while [ $interval -gt 0 ]; do
		echo -en "\r$tabs""${progress[$interval%$prog_len]} \r";
		sleep 0.4;
		interval=$(( $interval - 1 ));
	done
}



function scanning(){
	interval=$1

	# Match only whole blocks, or pairs across blocks
	matcher="(2[1-9a-f])|([3-6][0-9a-f])|(7[0-9a-c])"
	regex="\
(\
 ((\s|^)($matcher){2})\
|(($matcher){2}(\s|\$))\
|(($matcher)(\s)($matcher))\
)"

	progressdots $interval "--> seeking..."
	echo -e "\r\t\tmatched: $(( $RANDOM / 100 ))"

	hexes="$(cat /dev/urandom | head -c 64 | hexdump | head -4 | sed -e 's/^000[0-9]*\s//')"
	OLDIFS=$IFS
	IFS='
'
	for line in $hexes; do
		mystery_word=$(fortune -n 50 | head -1 | egrep -o "(\s|^|[a-z])[a-z]{3,8}([a-z]|\s|$)" | head -1)
#		matches=$(echo $line | egrep -o "($matcher)" )
#		echo $matches >> test
#		mystery_word=${mystery_text[$RANDOM%300]}
		line=$(echo $line | sed "s/\$/ $mystery_word/" )
		echo $line | egrep --color=always "$regex"
#| egrep --color=always "\s[a-f].*[6-9]\s"
	done;

	IFS=$OLDIFS
	echo ""
}
